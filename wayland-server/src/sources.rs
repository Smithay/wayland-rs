//! Event sources related functionnality
//!
//! Different event sources can be registered to event loops additionnaly
//! to the wayland listening and clients sockets. This module contains types
//! associated with this functionnality, notably the `Source` type.
//!
//! See the methods of the `LoopToken` type for the methods used to create these
//! event sources.

use std::io::Error as IoError;
use std::os::unix::io::RawFd;

use imp::{IdleSourceInner, SourceInner};

/// A handle to an event source
///
/// This object is obtained as the result of methods on the `LoopToken`
/// object adding event sources to the event loop. And can be used to
/// interact with the event source afterwards, modifying (if applicable)
/// or destroying it.
///
/// Dropping this object will *not* remove the event source from the event
/// loop, you need to use the `remove()` method for that.
pub struct Source<E> {
    inner: SourceInner<E>,
}

impl<E> Source<E> {
    pub(crate) fn make(inner: SourceInner<E>) -> Source<E> {
        Source { inner }
    }
}

// FD event source

bitflags!{
    /// Flags to register interest on a file descriptor
    pub struct FdInterest: u32 {
        /// Interest to be notified when the file descriptor is readable
        const READ  = 0x01;
        /// Interest to be notified when the file descriptor is writable
        const WRITE = 0x02;
    }
}

/// An event generated by an FD event source
#[derive(Debug)]
pub enum FdEvent {
    /// The FD is ready to be acted upon
    Ready {
        /// The concerned FD
        fd: RawFd,
        /// Mask indicating if the FD is ready for reading or writing
        mask: FdInterest,
    },
    /// An error occured while polling the FD
    Error {
        /// The concerned FD
        fd: RawFd,
        /// The reported error
        error: IoError,
    },
}

impl Source<FdEvent> {
    /// Change the registered interest for this FD
    pub fn update_mask(&mut self, mask: FdInterest) {
        self.inner.update_mask(mask)
    }

    /// Remove this event source from the event loop
    ///
    /// You are returned the implementation you provided
    /// for this event source at creation.
    pub fn remove(self) {
        self.inner.remove()
    }
}

// Timer event source

/// A timer generated event.
#[derive(Copy, Clone)]
pub struct TimerEvent;

impl Source<TimerEvent> {
    /// Set the delay of this timer
    ///
    /// The callback will be called during the next dispatch of the
    /// event loop after this time (in milliseconds) is elapsed.
    ///
    /// Manually the delay to 0 stops the timer (the callback won't be
    /// called).
    pub fn set_delay_ms(&mut self, delay: i32) {
        self.inner.set_delay_ms(delay)
    }

    /// Remove this event source from the event loop
    ///
    /// You are returned the implementation you provided
    /// for this event source at creation.
    pub fn remove(self) {
        self.inner.remove()
    }
}

// Signal event source

/// An event generated by an UNIX signal event source
///
/// Contains an enum indicating which signal was received.
#[derive(Copy, Clone)]
pub struct SignalEvent(pub ::nix::sys::signal::Signal);

impl Source<SignalEvent> {
    /// Remove this event source from the event loop
    ///
    /// You are returned the implementation you provided
    /// for this event source at creation.
    pub fn remove(self) {
        self.inner.remove()
    }
}

// Idle event source

/// Idle event source
///
/// A handle to an idle event source, see `LoopToken::add_idle_event_source()`.
///
/// Dropping this struct does not remove the event source,
/// use the `remove` method for that.
pub struct IdleSource {
    inner: IdleSourceInner,
}

impl IdleSource {
    pub(crate) fn make(inner: IdleSourceInner) -> IdleSource {
        IdleSource { inner }
    }

    /// Remove this event source from its event loop
    ///
    /// You retrieve the associated implementation. The event source
    /// is removed and if it hadn't been fired yet, it is cancelled.
    pub fn remove(self) {
        self.inner.remove()
    }
}
