use {Interface, NewResource, Resource};

mod client;
mod display;
mod globals;
mod resource;

pub(crate) use self::client::ClientInner;
pub(crate) use self::display::DisplayInner;
pub(crate) use self::globals::GlobalInner;
pub(crate) use self::resource::{NewResourceInner, ResourceInner};

/// A handle to the object map internal to the lib state
///
/// This type is only usable by code generated by `wayland-scanner`, and is
/// not instantiable directly.
pub enum ResourceMap {}

impl ResourceMap {
    /// Retrieve the Resource corresponding to a given id
    pub fn get<I: Interface>(&mut self, _id: u32) -> Option<Resource<I>> {
        match *self {}
    }
    /// Create a new resource for a given id
    pub fn get_new<I: Interface>(&mut self, _id: u32) -> Option<NewResource<I>> {
        match *self {}
    }
}
